{"ast":null,"code":"import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport Backend from 'i18next-xhr-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport pt from './locale/pt.json';\nimport en from './locale/en.json';\nvar fallbackLng = ['pt'];\nvar availableLanguages = ['en', 'pt'];\nvar resources = {\n  pt: pt,\n  en: en\n};\ni18n.use(Backend) // load translations using http (default public/assets/locals/en/translations)\n.use(LanguageDetector) // detect user language\n.use(initReactI18next) // pass the i18n instance to react-i18next.\n.init({\n  resources: fallbackLng,\n  // fallback language is portuguese.\n  detection: {\n    checkWhitelist: true // options for language detection\n\n  },\n  debug: true,\n  whitelist: availableLanguages,\n  interpolation: {\n    escapeValue: false // no need for react. it escapes by default\n\n  },\n  react: {\n    useSuspense: false\n  }\n});\nexport default i18n;","map":{"version":3,"sources":["C:/Users/ikaro/Documents/PTI-PTR-21-22/ptir/src/i18nextConf.ts"],"names":["i18n","initReactI18next","Backend","LanguageDetector","pt","en","fallbackLng","availableLanguages","resources","use","init","detection","checkWhitelist","debug","whitelist","interpolation","escapeValue","react","useSuspense"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,SAAjB;AACA,SAASC,gBAAT,QAAiC,eAAjC;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,gBAAP,MAA6B,kCAA7B;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAOC,EAAP,MAAe,kBAAf;AAKA,IAAMC,WAAW,GAAG,CAAC,IAAD,CAApB;AACA,IAAMC,kBAAkB,GAAG,CAAC,IAAD,EAAO,IAAP,CAA3B;AACA,IAAMC,SAAS,GAAG;AAChBJ,EAAAA,EAAE,EAAEA,EADY;AAEhBC,EAAAA,EAAE,EAAEA;AAFY,CAAlB;AAKAL,IAAI,CACDS,GADH,CACOP,OADP,EACgB;AADhB,CAEGO,GAFH,CAEON,gBAFP,EAEyB;AAFzB,CAGGM,GAHH,CAGOR,gBAHP,EAGyB;AAHzB,CAIGS,IAJH,CAIQ;AACJF,EAAAA,SAAS,EAACF,WADN;AACmB;AAEvBK,EAAAA,SAAS,EAAE;AACTC,IAAAA,cAAc,EAAE,IADP,CACa;;AADb,GAHP;AAOJC,EAAAA,KAAK,EAAE,IAPH;AASJC,EAAAA,SAAS,EAAEP,kBATP;AAWJQ,EAAAA,aAAa,EAAE;AACbC,IAAAA,WAAW,EAAE,KADA,CACO;;AADP,GAXX;AAcJC,EAAAA,KAAK,EAAE;AACLC,IAAAA,WAAW,EAAE;AADR;AAdH,CAJR;AAwBA,eAAelB,IAAf","sourcesContent":["import i18n from 'i18next';\r\nimport { initReactI18next } from 'react-i18next';\r\nimport Backend from 'i18next-xhr-backend';\r\nimport LanguageDetector from 'i18next-browser-languagedetector';\r\nimport pt from './locale/pt.json'\r\nimport en from './locale/en.json'\r\nimport i18next from 'i18next';\r\nimport { I18nContext } from 'react-i18next';\r\nimport { I18nextProvider } from 'react-i18next';\r\n\r\nconst fallbackLng = ['pt'];\r\nconst availableLanguages = ['en', 'pt'];\r\nconst resources = {\r\n  pt: pt, \r\n  en: en\r\n}\r\n\r\ni18n\r\n  .use(Backend) // load translations using http (default public/assets/locals/en/translations)\r\n  .use(LanguageDetector) // detect user language\r\n  .use(initReactI18next) // pass the i18n instance to react-i18next.\r\n  .init({\r\n    resources:fallbackLng, // fallback language is portuguese.\r\n\r\n    detection: {\r\n      checkWhitelist: true, // options for language detection\r\n    },\r\n\r\n    debug: true,\r\n\r\n    whitelist: availableLanguages,\r\n\r\n    interpolation: {\r\n      escapeValue: false, // no need for react. it escapes by default\r\n    },\r\n    react: {\r\n      useSuspense: false\r\n    }\r\n      \r\n  });\r\n\r\nexport default i18n;"]},"metadata":{},"sourceType":"module"}