{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\ikaro\\\\Documents\\\\PTI-PTR-21-22\\\\ptir\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\ikaro\\\\Documents\\\\PTI-PTR-21-22\\\\ptir\\\\src\\\\components\\\\Language-Changer\\\\Language-Changer.tsx\";\nimport React, { useEffect } from 'react';\nimport Select from \"react-select\";\nimport i18next from \"i18next\";\nimport { useCookies, Cookies } from 'react-cookie';\nexport default function LanguageChanger() {\n  var _useCookies = useCookies(['cookie-name']),\n      _useCookies2 = _slicedToArray(_useCookies, 3),\n      setCookie = _useCookies2[1],\n      removeCookie = _useCookies2[2];\n\n  var cookies = new Cookies();\n  var options = [{\n    value: \"pt\",\n    label: \"Português\"\n  }, {\n    value: \"en\",\n    label: \"English\"\n  }];\n  var optionNumber = cookies.get(\"lang\") || 0;\n\n  function changeLanguage(e) {\n    i18next.changeLanguage(e.value);\n    var nLang = e.value === 'pt' ? 0 : 1;\n    cookies.remove(\"lang\");\n    cookies.set(\"lang\", nLang);\n  }\n\n  function initiateLanguage() {\n    var nLang = cookies.get(\"lang\");\n    console.log(nLang);\n\n    if (nLang === undefined) {\n      cookies.set(\"lang\", 0);\n    } else {\n      nLang = parseInt(nLang);\n      var lang = nLang === 0 ? 'pt' : 'en';\n      i18next.changeLanguage(lang);\n    }\n  }\n  /* todo add function that checks which language on \r\n    component start up with cookie or local storage*/\n\n\n  useEffect(function () {\n    initiateLanguage();\n  }, []);\n  return /*#__PURE__*/React.createElement(Select, {\n    defaultValue: options[optionNumber],\n    onChange: changeLanguage,\n    className: \"ml-6 w-32 z-10\",\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/ikaro/Documents/PTI-PTR-21-22/ptir/src/components/Language-Changer/Language-Changer.tsx"],"names":["React","useEffect","Select","i18next","useCookies","Cookies","LanguageChanger","setCookie","removeCookie","cookies","options","value","label","optionNumber","get","changeLanguage","e","nLang","remove","set","initiateLanguage","console","log","undefined","parseInt","lang"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,cAApC;AAGA,eAAe,SAASC,eAAT,GAA2B;AAAA,oBACJF,UAAU,CAAC,CAAC,aAAD,CAAD,CADN;AAAA;AAAA,MAC/BG,SAD+B;AAAA,MACpBC,YADoB;;AAExC,MAAMC,OAAO,GAAG,IAAIJ,OAAJ,EAAhB;AAEA,MAAMK,OAAO,GAAG,CACd;AAAEC,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GADc,EAEd;AAAED,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GAFc,CAAhB;AAKA,MAAIC,YAAY,GAAGJ,OAAO,CAACK,GAAR,CAAY,MAAZ,KAAuB,CAA1C;;AAEA,WAASC,cAAT,CAAwBC,CAAxB,EAAgC;AAC9Bb,IAAAA,OAAO,CAACY,cAAR,CAAuBC,CAAC,CAACL,KAAzB;AACA,QAAIM,KAAK,GAAGD,CAAC,CAACL,KAAF,KAAY,IAAZ,GAAmB,CAAnB,GAAuB,CAAnC;AACAF,IAAAA,OAAO,CAACS,MAAR,CAAe,MAAf;AACAT,IAAAA,OAAO,CAACU,GAAR,CAAY,MAAZ,EAAoBF,KAApB;AACD;;AAED,WAASG,gBAAT,GAA4B;AAC1B,QAAIH,KAAK,GAAGR,OAAO,CAACK,GAAR,CAAY,MAAZ,CAAZ;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;;AACA,QAAGA,KAAK,KAAKM,SAAb,EAAwB;AACtBd,MAAAA,OAAO,CAACU,GAAR,CAAY,MAAZ,EAAoB,CAApB;AACD,KAFD,MAEO;AACLF,MAAAA,KAAK,GAAGO,QAAQ,CAACP,KAAD,CAAhB;AACA,UAAIQ,IAAI,GAAGR,KAAK,KAAK,CAAV,GAAc,IAAd,GAAqB,IAAhC;AACAd,MAAAA,OAAO,CAACY,cAAR,CAAuBU,IAAvB;AACD;AACF;AAED;AACF;;;AACExB,EAAAA,SAAS,CAAC,YAAM;AACdmB,IAAAA,gBAAgB;AACjB,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE,oBAAC,MAAD;AACE,IAAA,YAAY,EAAEV,OAAO,CAACG,YAAD,CADvB;AAEE,IAAA,QAAQ,EAAEE,cAFZ;AAGE,IAAA,SAAS,EAAC,gBAHZ;AAIE,IAAA,OAAO,EAAEL,OAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAQD","sourcesContent":["import React, { useEffect } from 'react'\r\nimport Select from \"react-select\";\r\nimport i18next from \"i18next\";\r\nimport { useCookies, Cookies } from 'react-cookie';\r\n\r\n\r\nexport default function LanguageChanger() {\r\n  const [, setCookie, removeCookie] = useCookies(['cookie-name'])\r\n  const cookies = new Cookies()\r\n\r\n  const options = [\r\n    { value: \"pt\", label: \"Português\" },\r\n    { value: \"en\", label: \"English\" },\r\n  ];\r\n\r\n  var optionNumber = cookies.get(\"lang\") || 0; \r\n\r\n  function changeLanguage(e: any) {\r\n    i18next.changeLanguage(e.value)\r\n    let nLang = e.value === 'pt' ? 0 : 1 \r\n    cookies.remove(\"lang\")\r\n    cookies.set(\"lang\", nLang)\r\n  }\r\n\r\n  function initiateLanguage() {\r\n    let nLang = cookies.get(\"lang\")\r\n    console.log(nLang)\r\n    if(nLang === undefined) {\r\n      cookies.set(\"lang\", 0)\r\n    } else {\r\n      nLang = parseInt(nLang)\r\n      let lang = nLang === 0 ? 'pt' : 'en'\r\n      i18next.changeLanguage(lang)\r\n    }\r\n  }\r\n  \r\n  /* todo add function that checks which language on \r\n    component start up with cookie or local storage*/\r\n  useEffect(() => {\r\n    initiateLanguage()\r\n  }, [])\r\n  \r\n  return (\r\n    <Select\r\n      defaultValue={options[optionNumber]}\r\n      onChange={changeLanguage}\r\n      className=\"ml-6 w-32 z-10\"\r\n      options={options}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}